


https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial#Plugintutorial-Eclipse


Do not select "Existing Maven Projects", which takes you to the m2e route


Use Eclipse Juno (4.2) or later for the best experience.

As Jenkins plugins are Maven projects, Eclipse users have two ways to load a Jenkins plugin project. One is to use m2e, which tries to make Eclipse understand Maven "natively", and the other is to use Maven Eclipse plugin, which makes Maven generate Eclipse project definitions. At the moment, unless you have some prior experience with m2e, we currently recommend plugin developers to go with the Maven Eclipse plugin.

Eclipse users can run the following Maven command to generate Eclipse project files (the custom outputDirectory parameter is used to work around the lack of JSR-269 annotation processor support in Eclipse:)
http://stackoverflow.com/questions/19383729/how-to-run-jsr269-annotaion-processor-in-eclipse-kepler-with-java-7-maven

$ mvn -DdownloadSources=true -DdownloadJavadocs=true -DoutputDirectory=target/eclipse-classes -Declipse.workspace=/path/to/workspace eclipse:eclipse eclipse:add-maven-repo
Where /path/to/workspace is the path to your Eclipse workspace.

Once this command completes successfully, use "Import..." (under the File menu in Eclipse) and select "General" > "Existing Projects into Workspace".

	Do not select "Existing Maven Projects", which takes you to the m2e route
See Jenkins plugin development with Eclipse for gotchas and other known Eclipse/Maven related issues with Jenkins plugin development.

See Eclipse alternative build setup for an alternative way of setting up the Eclipse build environment, that is a bit more technically involved than using maven, but can give faster build times.


You need an m2e connector which automatically configures your Eclipse project for the annotation processing.

The m2e connector to use depends on how you have configured the annotation processing on the Maven side. If you just rely on the maven-compiler-plugin to find your annotation processor, or if you have configured the maven-annotation-plugin for that, then you can use the connector m2e-apt by JBoss.





----------------------------------------------------------------------------------------------------------------------------
MAVEN SETUP
1. Add the jenkins respostory into maven.

 <pluginGroups>
    <pluginGroup>org.jenkins-ci.tools</pluginGroup>
  </pluginGroups>

  <profiles>
    <!-- Give access to Jenkins plugins -->
    <profile>
      <id>jenkins</id>
      <activation>
        <activeByDefault>true</activeByDefault> <!-- change this to false, if you don't like to have it on per default -->
      </activation>
      <repositories>
        <repository>
          <id>repo.jenkins-ci.org</id>
          <url>http://repo.jenkins-ci.org/public/</url>
        </repository>
      </repositories>
      <pluginRepositories>
        <pluginRepository>
          <id>repo.jenkins-ci.org</id>
          <url>http://repo.jenkins-ci.org/public/</url>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>
  <mirrors>
    <mirror>
      <id>repo.jenkins-ci.org</id>
      <url>http://repo.jenkins-ci.org/public/</url>
      <mirrorOf>m.g.o-public</mirrorOf>
    </mirror>
  </mirrors>
 
2. configure the maven for eclipse to use local maven.
3. configure the maven to have the  JSR-269 annotation processor support.
  
  


JENKINS CREATION

1. mvn hpi:create
2. mvn clean install package -Dmaven.test.skip=true

3. mvn eclipse:eclipse

1. first run the command to create the jenkins plugin structure project:
 mvn hpi:create
  input the group id and artifact id ;
2. make sure your eclipse support the JSR-269 annotation processor,If not take to this url following the steps to install m2e-apt
   http://stackoverflow.com/questions/19383729/how-to-run-jsr269-annotaion-processor-in-eclipse-kepler-with-java-7-maven
   m2e-apt can easily be installed from the m2e discovery dialog in Eclipse (“Window” → “Preferences” → “Maven” → “Discovery” → “Open Catalog”). 
   Then turn the connector on at “Window” → “Preferences” → “Maven” → “Annotation Processing”. When you now update your Maven project
   (right click on the project and select “Maven” → “Update Project…”), then annotation processing for the Eclipse project should be 
   automatically configured in the dialog you have described in your question.
   
   or add the m2e http://eclipse.org/m2e/m2e-downloads.html
   
3. restart the eclipse
4. run command to covert the jenkins project to eclipse project :
   mvn eclipse:eclipse
5. import the covert project into ecilpse:
   Once this command completes successfully, use "Import..." (under the File menu in Eclipse) and select "General" > "Existing Projects into Workspace".

	Do not select "Existing Maven Projects", which takes you to the m2e route
6. run the command to build the jenkins plugin :
     mvn clean install package -Dmaven.test.skip=true
	must skip the tests in the project.
	
7. run the jenkins server: 

   mvn hpi:run -Djetty.port=9999
   http://localhost:8092/jenkins/




3. mvn -DdownloadSources=true -DdownloadJavadocs=true -DoutputDirectory=target/eclipse-classes -Declipse.workspace=C:/Users/ahu/workspace_latest eclipse:eclipse eclipse:add-maven-repo























